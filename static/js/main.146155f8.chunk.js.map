{"version":3,"sources":["Button.js","Clock.js","ClockList.js","App.js","reportWebVitals.js","index.js"],"names":["Button","nextProps","this","props","prevC","change","prevL","locale","oldC","oldL","console","log","type","onClick","React","Component","Clock","execu","state","setState","date","Date","toLocaleTimeString","timer","setInterval","toLocaleString","clearInterval","className","ClockList","arrays","map","a","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAuBeA,E,2KApBb,SAAsBC,GACpB,MAAuCC,KAAKC,MAA9BC,EAAd,EAAMC,OAAuBC,EAA7B,EAAqBC,OACPC,EAAuBP,EAA/BI,OAAsBI,EAASR,EAAjBM,OAEpB,OAAIH,IAAUI,GAAQF,IAAUG,I,oBAMlC,WACEC,QAAQC,IAAI,gBACZ,MAA2BT,KAAKC,MAAxBE,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,OAChB,OACE,wBAAQK,KAAK,SAASC,QAAS,kBAAMR,EAAOE,IAA5C,SACc,UAAXA,EAAqB,eAAiB,gE,GAhB1BO,IAAMC,WCyCZC,E,kDAvCb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAgBRc,MAAQ,WAES,UADE,EAAKC,MAAhBX,OAEJ,EAAKY,SAAS,CAAEZ,OAAQ,UAExB,EAAKY,SAAS,CAAEZ,OAAQ,WApB1B,EAAKW,MAAQ,CAAEE,MAAM,IAAIC,MAAOC,qBAAsBf,OAAQ,SAF7C,E,qDAKnB,WAAqB,IAAD,OAClBL,KAAKqB,MAAQC,aAAY,WACvB,EAAKL,UAAS,SAACD,GAAD,MAAY,CACxBE,MAAM,IAAIC,MAAOI,eAAeP,EAAMX,cAEvC,O,kCAGL,WACEmB,cAAcxB,KAAKqB,S,oBAYrB,WACE,MAAuBrB,KAAKgB,MAAtBE,EAAN,EAAMA,KAAMb,EAAZ,EAAYA,OACZ,OACE,gCACE,oBAAIoB,UAAU,WAAd,SAA0BP,IAC1B,cAAC,EAAD,CAAQb,OAAQA,EAAQF,OAAQH,KAAKe,MAArC,6B,GAhCYH,IAAMC,WCYXa,E,4JAXb,WACE,IAAQC,EAAW3B,KAAKC,MAAhB0B,OACR,OACE,8BACGA,EAAOC,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,GAAYA,Y,GANEhB,aCQTiB,MATf,WAEE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,CAAWE,OAHP,CAAC,EAAG,EAAG,QCSFI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.146155f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    let { change: prevC, locale: prevL } = this.props;\r\n    let { change: oldC, locale: oldL } = nextProps;\r\n\r\n    if (prevC === oldC && prevL === oldL) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    console.log('im rendering');\r\n    const { change, locale } = this.props;\r\n    return (\r\n      <button type=\"button\" onClick={() => change(locale)}>\r\n        {locale === 'bn-BD' ? 'Make English' : 'বাংলা করুন'}\r\n      </button>\r\n    );\r\n  }\r\n}\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { date: new Date().toLocaleTimeString(), locale: 'bn-BD' };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState((state) => ({\r\n        date: new Date().toLocaleString(state.locale),\r\n      }));\r\n    }, 500);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  execu = () => {\r\n    let { locale } = this.state;\r\n    if (locale === 'bn-BD') {\r\n      this.setState({ locale: 'en-US' });\r\n    } else {\r\n      this.setState({ locale: 'bn-BD' });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { date, locale } = this.state;\r\n    return (\r\n      <div>\r\n        <h1 className=\"heading1\">{date}</h1>\r\n        <Button locale={locale} change={this.execu}>\r\n          Click Me\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import { Component } from 'react';\r\nimport Clock from './Clock';\r\n\r\nclass ClockList extends Component {\r\n  render() {\r\n    const { arrays } = this.props;\r\n    return (\r\n      <div>\r\n        {arrays.map((a) => (\r\n          <Clock key={a} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ClockList;\r\n","import ClockList from './ClockList';\n\nfunction App() {\n  let x = [1, 2, 3];\n  return (\n    <div className=\"App\">\n      <ClockList arrays={x} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}